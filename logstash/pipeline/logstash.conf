input {
	tcp {
		port => 5000
	}
	beats {
		client_inactivity_timeout => 300
		port => 5044
	}
}

## Add your filters / logstash plugins configuration here
filter {
	mutate {
		remove_field => [ "[host]" ]
	}
	mutate {
		add_field => {
			"host" => "localhost (logstash.conf)"
		}
	}

	if [fields][tag] == "json" {
		# json {
		# source => "message"
		# }
		grok {
			match => {
				"message" => '{"log_id": %{NUMBER:log_id}, "msg": "%{GREEDYDATA:message}"}'
			}
			overwrite => [ "message" ]
		}
		mutate {
			add_field => {
				"container_id" => "1"
			}
    		convert => {
				"log_id" => "integer" 
			}
		}
	}
	else if  [fields][tag] == "quotation" {
		grok {
			match => {
				"message" => 'log_id="%{NUMBER:log_id}" msg="%{GREEDYDATA:message}"'
			}
			overwrite => [ "message" ]
		}
		mutate {
			add_field => {
				"container_id" => "2"
			}
			convert => {
				"log_id" => "integer" 
			}
		}
	}
	else if  [fields][tag] == "comma" {
		grok {
			match => {
				"message" => "%{NUMBER:log_id},%{GREEDYDATA:message}"
			}
			overwrite => [ "message" ]
		}
		mutate {
			add_field => {
				"container_id" => "3"
			}
			convert => {
				"log_id" => "integer" 
			}
		}
	}

	if [container_id] == "1" {
		aggregate {
			task_id => "%{log_id}"
			code => "map['log_stream'] ||= 'Got a log in the first container. '"
			map_action => "create"
     	}
	}
	else if [container_id] == "2" {
		aggregate {
			task_id => "%{log_id}"
			code => "map['log_stream'] += 'Something happened in the second one. '"
			map_action => "update"
     	}
	}
	else if [container_id] == "3" {
		aggregate {
			task_id => "%{log_id}"
			code => "event.set('log_stream', map['log_stream'] + 'Arrived to the last one.')"
			map_action => "update"
			# end_of_task => true
			# timeout_task_id_field => "log_id"
       		# timeout => 60 # 1 min timeout
			# timeout_tags => ['timeout_error']
			# timeout_code => "event.set('log_stream', 'An error occured')"
     	}
	}
}

output {
	elasticsearch {
		hosts => "elasticsearch:9200"
		user => "elastic"
		password => "changeme"
	}
}
